最开始使用的框架结构是：
服务端渲染或前端HTML+JS -> 控制器层（Controller） -> 服务层（Service）或者说是业务逻辑层（BLL） -> DAL层 + DBHelper。
这样的架构，导致添加一个业务功能就需要在各个层都写上一点代码，写起来特别累！而且这肯定不是合理的架构。

然后进化了一下，使用EF代替了原本的DAL层，把架构改为了：
服务端渲染或前端HTML+JS -> 控制器层（Controller） -> 服务层（Service）或者说是业务逻辑层（BLL） -> 数据访问层（EF）。

但是，这样做的话，仅仅就是合并了DAL层和DBHelper层。在大多数不可重用的业务逻辑面前，还是显得那么地无力与麻烦，提升非常有限。
比如首页，需要获取很多方面的数据，那么就需要在Service里面写一个获取首页数据的方法，然后这个方法里面使用EF调用各种各样的数据，调用完了再返回
给控制器。且这样做先不说这个方法的可重用性为0，并传值也是一个问题，要么使用字典传值，要么使用ViewModel传值。前者要在视图或者控制器里面再读取
或者解析一次返回的数据，后者甚至要添加一大堆的ViewModel，这两种方式都荒废了框架自带的ViewBag或者ViewData传值方式（永远只传一个值）。
并且随着控制器的方法越来越多，Service层里面这样的方法就会越来越多，越来越多，基本上BLL层就是一堆只有一次调用的方法，控制器变成了一个单纯的传声筒，
或者仅仅是做一点零碎的Session验证或者权限验证等等，感觉纯粹是没事找事干，增加自己的工作量。
这当然也不是我想要的架构。

于是，我又想，能不能把业务逻辑放到控制器里面来，然后有共用的业务逻辑的话（比如拆分母订单）就放在一些公共的业务逻辑类（Public Business Layer）里面。
查了下网上各种博客都说有不要在控制器层写业务逻辑，在控制器层写业务逻辑不好没法共用代码杂乱等等，而且如果涉及到事务的话没法玩，我不敢完全苟同。
我始终觉得，在许多项目都喜欢把业务逻辑写到前端的这种趋势下，我还使用逻辑偏后端的做法，为何不把业务逻辑离前端近一点呢？
比如之前的做法是前端 -> 控制器 -> Service，中间隔了好远，路途越远，框架代码越显得冗余，不是么？
为什么不把业务逻辑放到控制器即使用 前端 -> 控制器+公共业务逻辑 的这种做法呢？这样即优化了框架，又能兼顾业务逻辑重用，何乐而不为呢？

那么最终的项目结构为：

服务端渲染或前端HTML+JS -> 控制器层（包含 公共业务逻辑PBL + 数据访问）

退一万步讲，假如哪天我又想要回Service层了，只需要把逻辑再次封装下沉即可。或者说哪些业务真的要共用了，放到PBLL层即可。


