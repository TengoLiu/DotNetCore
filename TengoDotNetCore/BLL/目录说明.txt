关于DAL：
既然说把数据库的操作都放到了DAL层，那么事务是不是就很不方便了？
目前我能想到的一个折中的方法：
	如果涉及到事务（插入或更新多张表的），那么就把修改的参数全部给对应的DAL来处理就好了。
	但其实这样的话，就违背了DAL跟表一一对应的设计了，不好。

那么，如果把dbContext放到BLL层的话，会不会有不同的效果呢？
	如果真的这样做了的话，那么BLL层就会依赖于DB了，哪天如果想切换成ado.net的话，会需要把BLL和DAL层都大改。也是得不偿失的。
	只要是想DAL层各种方法实现单一功能的，那么无论如何，db都必须放在BLL层，无论是dbContext还是database。
	于是 DAL层，真的需要吗？
	

看论坛上大神关于DAL的原话：
如果你需要研究DAL，你会发现不同的数据库系统有不同的API协议。传统的关系数据库好一些，往往通用地支持最基本的sql（sql92？）标准。而nosql各有各的原生查询方法。

研究并封装应用程序调用数据库的API，这就是DAL。因此SQLHelper是一个初步的、准确的DAL。

DAL作为一种常用的服务工具框架平台，它当然应该脱离开业务逻辑，在你了解了业务逻辑之前就完善它。

而至于说那种“一个类对应一个表的处理方法”的DAL，除了越俎代庖地去做一点BLL的事情，混淆了DAL真正应该负责的职责，反过来我们也可以看出这种所谓的DAL的技术含量和灵活性等于零。

其实如果你在DAL层没有什么可做的，你就可以什么都不做，直接调用各种数据库操作框架。其目的就是为了高效率地进行数据库通用操作，而不是把自己弄得繁琐。

调用DAL，你未必是在BLL中写sql语句。你可能通过Linq provider写，也可能是调用某种原生的NoSql写程序来操作。

关于“BLL和DAL耦合在一起的才比较科学呢”这个说法不准确。实际上你此时根本没有写DAL，你只是写了类似于BLL的代码，其中调用微软的DAL框架。


	如果按照上面所说的，那是不是说，我的SqlHelper其实就应该是一个DAL？

这一层编写所有业务逻辑代码。并且，不再有DAL层，而EF就是我们的DAL层，没必要再多搞一层DAL。